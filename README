This directory contains all the ccontrol project.

Cache Control allows an application to restrict any dynamic memory allocation to a partition
of the cache.

This tool works by loading custom code into the Linux kernel (using a module) that will
reserve memory and exports it to the user using virtual devices. The cache partitioning
is guarantied by page coloring (giving physical pages that fall in the same part of cache).

This tools does not work on fully associative caches.


Compiling:

The ccontrol dir contains code for the kernel module and the malloc hijacker.
The experiments dir contains simple programs used to validate the tool 
(similar to the ones used by Ulrich Drepper in
"What every programmer should know about memory".

Each source dir contains a Makefile to compile the binaries. There are not currently
merged.

WARNING: currently the kernel module needs "detect_cache.sh" to be run prior
to running make (it will try to detect your cache characteristics, check the
result file "cache.h" to ensure correct working.

The kernel module requires the running kernel headers to compile.

Running:

You need to load the module into memory while specifying each partition size (in terms
of number of colors). The "cache.h" file contains the number of colors your system
contains and loading the module without parameters will also give you the information.

	sudo module_load subdivs=<partitions size in colors> mem=<memory size to reserve (in B)>

Any memory you reserve for the module will be unavailable to the rest of the system (be careful
to not trigger the OOM killer by reserving too much memory). The module does not support swapping
allocated pages.

Unloading:
	sudo module_unload

How much memory can I get:
	As much as there is physical memory in your system.

How to use inside an application:
	mmap the virtual devices ccontrol created (one per partition).
	It works as if you allocated using mmap(MAP_ANONYMOUS).

Be carefull:
	MAP_PRIVATE is forbidden !
	Do something like that:
	fd = open("/dev/ccontrol0",O_RDWR);
	mmap(NULL,size,PROT_READ| PROT_WRITE, MAP_SHARED,fd, 0)

NOTES:
	modinfo on the module will display the parameters and a small desc.
	The module dump some useful info to syslog. Type 'dmesg' to display it. 
